<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@model IEnumerable<#= "<" + ViewDataTypeName + ">" #>
<#
// The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.
if(IsPartialView) {
#>

<#
} else if(IsLayoutPageSelected) {
#>

@{
    ViewBag.Title = "<#= ViewName#>";
<#
if (!String.IsNullOrEmpty(LayoutPageFile)) {
#>
    Layout = "<#= LayoutPageFile#>";
<#
}
#>
}

<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-sm-4">
        <h2><#= ViewName#></h2>
        <ol class="breadcrumb">
            <li class="active">
                <strong><#= ViewDataTypeShortName #></strong>
            </li>
        </ol>
    </div>
</div>

<#
}
else {
#>

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
  <head>
      <meta name="viewport" content="width=device-width" />
      <title><#= ViewName #></title>
  </head>
  <body>
<#
    PushIndent("    ");
}
#>
<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5>List of <#= ViewDataTypeShortName #></h5>
                    <div class="ibox-tools">
                        <a class="collapse-link">
                            <i class="fa fa-chevron-up"></i>
                        </a>
                        <a class="dropdown-toggle" data-toggle="dropdown" href="#">
                            <i class="fa fa-wrench"></i>
                        </a>
                        <ul class="dropdown-menu dropdown-user">
                            <li><a href="#">Config option 1</a></li>
                            <li><a href="#">Config option 2</a></li>
                        </ul>
                        <a class="close-link"><i class="fa fa-times">
                            </i>
                        </a>
                    </div>
                </div>
                <div class="ibox-content">
                  <table class="table table-striped table-bordered table-hover dataTables-example">
                    <thead>
                        <tr role="row">
<#
                            IEnumerable<PropertyMetadata> properties = ModelMetadata.Properties;
                            foreach (PropertyMetadata property in properties) {
                                if (property.Scaffold && !property.IsPrimaryKey && !property.IsForeignKey) {
#>
<#
      // This is a temporary work around until core scaffolding provides support for independent associations.
                                    if (property.IsAssociation && GetRelatedModelMetadata(property) == null) {
                                        continue;
                                    }
#>
                            <th class="sorting_asc" tabindex="0" aria-controls="DataTables_Table_0" rowspan="1" colspan="1" aria-sort="ascending" aria-label="Rendering engine: activate to sort column descending" style="width: 128px;">@Html.DisplayNameFor(model => model.<#= GetValueExpression(property) #>)</th>
<#
                                }
                            }
#>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
<#
                      string pkName = GetPrimaryKeyName();
#>
                      @foreach (var item in Model) {
                        <tr class="gradeA odd" role="row" data-id="@item.<#= pkName #>">
<#
                          foreach (PropertyMetadata property in properties) {
                              if (property.Scaffold && !property.IsPrimaryKey && !property.IsForeignKey) {
#>
<#
      // This is a temporary work around until core scaffolding provides support for independent associations.
                                if (property.IsAssociation && GetRelatedModelMetadata(property) == null) {
                                    continue;
                                }
#>
                            <td>
                                @Html.DisplayFor(modelItem => <#= "item." + GetValueExpression(property) #>)
                            </td>
<#
                              }
                          }
                          if (pkName != null) {
#>
                            <td>
                              <button type="button" class="btn btn-primary btn-xs" id="btnDetalle">Detalle</button>
                              <button type="button" class="btn btn-default btn-xs" id="btnEditar">Editar</button>
                            </td>
<#
                            }
                            else {
#>
                            <td>
                              <button type="button" class="btn btn-primary btn-xs" id="btnDetalle">Detalle</button>
                              <button type="button" class="btn btn-default btn-xs" id="btnEditar">Editar</button>
                            </td>
<#
}
#>
                        </tr>
                      }
                    </tbody>
                    <tfoot>
                        <tr role="row">
<#
                            //IEnumerable<PropertyMetadata> properties = ModelMetadata.Properties;
                            foreach (PropertyMetadata property in properties) {
                                if (property.Scaffold && !property.IsPrimaryKey && !property.IsForeignKey) {
#>
<#
      // This is a temporary work around until core scaffolding provides support for independent associations.
                                    if (property.IsAssociation && GetRelatedModelMetadata(property) == null) {
                                        continue;
                                    }
#>
                            <th  rowspan="1" colspan="1">@Html.DisplayNameFor(model => model.<#= GetValueExpression(property) #>)</th>
<#
                                }
                            }
#>
                            <th></th>
                        </tr>
                    </tfoot>
                  </table>
                </div>
            </div>
        </div>
    </div>
 </div>
  <#
  // The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
  #>
  <#
  if(!IsPartialView && !IsLayoutPageSelected) {
      ClearIndent();
  #>
  </body>
</html>
<#
  }
#>

@section Styles {
    @Styles.Render("~/Content/plugins/dataTables/dataTablesStyles")
}

@section Scripts {
  @Scripts.Render("~/plugins/dataTables")
}
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>