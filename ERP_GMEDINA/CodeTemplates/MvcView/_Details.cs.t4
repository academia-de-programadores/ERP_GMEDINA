<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@model <#= ViewDataTypeName #>
<#
// "form-control" attribute is only supported for all EditorFor() in System.Web.Mvc 5.1.0.0 or later versions, except for checkbox, which uses a div in Bootstrap
string boolType = "System.Boolean";
Version requiredMvcVersion = new Version("5.1.0.0");
bool isControlHtmlAttributesSupported = MvcVersion >= requiredMvcVersion;
// The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.
if(IsPartialView) {#><#}else if(IsLayoutPageSelected) {#>@{ViewBag.Title = "<#= ViewName#>";<#if (!String.IsNullOrEmpty(LayoutPageFile)) {#>Layout = "<#= LayoutPageFile#>";
<#}#>}  @Html.AntiForgeryToken()
<#}else {#>@{Layout = null;}
<!DOCTYPE html>
<html>
  <head>
      <meta name="viewport" content="width=device-width" />
      <title><#= ViewName #></title>
  </head>
  <body>
<#
    PushIndent("    ");
}
#>
<#
if (ReferenceScriptLibraries) {
#>
<#
    if (!IsLayoutPageSelected && IsBundleConfigPresent) {
#>
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")

<#
    }
#>
<#
    else if (!IsLayoutPageSelected) {
#>
<script src="~/Scripts/jquery-<#= JQueryVersion #>.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<#}#>
<#
}#>
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "frmDetalle" }))
        {       
            @Html.AntiForgeryToken()
              <div class="form-horizontal">
<#

#>
<#
foreach (PropertyMetadata property in ModelMetadata.Properties) {
    if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly && !property.IsAssociation) {

        // If the property is a primary key and Guid, then the Guid is generated in the controller. Hence, this propery is not displayed on the view.
        if (property.IsPrimaryKey && IsPropertyGuid(property)) {
            continue;
        }

#>
                  <div class="form-group">
<#
        if (property.IsForeignKey) {
#>
                    @Html.LabelFor(model => model.<#= property.PropertyName #>, "<#= GetAssociationName(property) #>", htmlAttributes: new { @class = "control-label col-md-2" })
<#
        } else {
#>
                    @Html.LabelFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "control-label col-md-2" })
<#
        }
#>
                    <div class="col-md-10">
<#
        bool isCheckbox = property.TypeName.Equals(boolType);
        if (property.IsForeignKey) {
#>
<#
            if (isControlHtmlAttributesSupported) {
#>
                      @Html.DropDownList("<#= property.PropertyName #>", null, htmlAttributes: new { @class = "form-control" })
<#
            } else {
#>
                      @Html.DropDownList("<#= property.PropertyName #>", String.Empty)
<#
            }
#>
<#
        } else  if (isControlHtmlAttributesSupported) {
            if (isCheckbox) {
#>
                      <div class="checkbox">
<#
                PushIndent("    ");
#>
                      @Html.EditorFor(model => model.<#= property.PropertyName #>)
<#
            } else if (property.IsEnum && !property.IsEnumFlags) {
#>
                      @Html.EnumDropDownListFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "form-control", @disabled = "disabled" } })
<#
            } else {
#>
                      @Html.EditorFor(model => model.<#= property.PropertyName #>, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
<#
            }
        } else {
#>
                      @Html.EditorFor(model => model.<#= property.PropertyName #>)
<#
        }
#>
<#
        if (isControlHtmlAttributesSupported) {
#>
                      @Html.ValidationMessageFor(model => model.<#= property.PropertyName #>, "", new { @class = "text-danger" })
<#
        } else {
#>
                      @Html.ValidationMessageFor(model => model.<#= property.PropertyName #>)
<#
        }
#>
<#
        if (isCheckbox && isControlHtmlAttributesSupported) {
            PopIndent();
#>
                      </div>
<#
        }
#>
                    </div>
                  </div>

<#
    }
}
#>

                </div>
          
    <div class="ibox float-e-margins">
        <div class="ibox-title">
            <h2>Auditoría</h2>
        </div>
        <div class="ibox-content">
            <div class="form-horizontal">
                <table class="table table-striped table-bordered dataTable">
                    <thead>
                        <tr>
                            <th>Acción</th>
                            <th>Usuario</th>
                            <th>Fecha</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Creado</td>
                            <td>@Html.EditorFor(model => model.XXX_UsuarioCrea, new { htmlAttributes = new { @class = "", @disabled = "disabled" } })</td>
                            <td>@Html.EditorFor(model => model.XXX_FechaCrea, new { htmlAttributes = new { @class = "", @disabled = "disabled" } })</td>
                        </tr>
                        <tr>
                            <td>Modificado</td>
                            <td>@Html.EditorFor(model => model.XXX_UsuarioModifica, new { htmlAttributes = new { @class = "", @disabled = "disabled" } })</td>
                            <td>@Html.EditorFor(model => model.XXX_FechaModifica, new { htmlAttributes = new { @class = "", @disabled = "disabled" } })</td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="footer">
                <button type="button" class="btn btn-white pull-right" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
	}

<#
if(IsLayoutPageSelected && ReferenceScriptLibraries && IsBundleConfigPresent) {
}
#>
<#
else if(IsLayoutPageSelected && ReferenceScriptLibraries) {
#>

<script src="~/Scripts/jquery-<#= JQueryVersion #>.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<#
}
#>
<#
// The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
#>
<#
if(!IsPartialView && !IsLayoutPageSelected) {
    ClearIndent();
#>
  </body>
</html>
<#
}
#>
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>