<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@model <#= ViewDataTypeName #>
<#
// "form-control" attribute is only supported for all EditorFor() in System.Web.Mvc 5.1.0.0 or later versions, except for checkbox, which uses a div in Bootstrap
string boolType = "System.Boolean";
Version requiredMvcVersion = new Version("5.1.0.0");
bool isControlHtmlAttributesSupported = MvcVersion >= requiredMvcVersion;
// The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.
if(IsPartialView) {#>
<#
}
else if(IsLayoutPageSelected) {
#>
@{
    ViewBag.Title = "<#= ViewName#>";
<#
if (!String.IsNullOrEmpty(LayoutPageFile)) {
#>
    Layout = "<#= LayoutPageFile#>";
<#
}
#>
}
    @Html.AntiForgeryToken()
<#
}
else {
#>
@{
    Layout = null;
}
<!DOCTYPE html>

<html>
  <head>
      <meta name="viewport" content="width=device-width" />
      <title><#= ViewName #></title>
  </head>
  <body>
<#
    PushIndent("    ");
}
#>
<#
if (ReferenceScriptLibraries) {
#>
<#
    if (!IsLayoutPageSelected && IsBundleConfigPresent) {
#>
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")

<#
    }
#>
<#
    else if (!IsLayoutPageSelected) {
#>
<script src="~/Scripts/jquery-<#= JQueryVersion #>.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

<#
    }
#>
<div class="modal inmodal" id="ModalEditar" tabindex="-1" role="dialog" style="display: none;" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content animated fadeIn">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span><span class="sr-only">Close</span></button>
                <h4 class="modal-title">Editar <#= ViewDataTypeShortName.Substring(2) #></h4>
            </div>
            <div class="modal-body">
<#
}
#>
                @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "FormEditar" }))
                {
                        <div class="form-horizontal">
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
<#

#>
<#
foreach (PropertyMetadata property in ModelMetadata.Properties) {
	string hola = Convert.ToString(property.PropertyName.ToString());

	            int count = 0;
				bool permiso = true;
            foreach (var item in hola)
            {
                count++;
            }
			

				if (count >=6)
	{
	if (property.PropertyName.Substring(count - 6) == "Estado")
	{
	 permiso = false;
	}
	}
				if (count >=13)
	{
	if (property.PropertyName.Substring(count - 13) == "RazonInactivo")
	{
	 permiso = false;
	}
	}



					if (count >=11)
	{
	if (property.PropertyName.Substring(count - 11) == "UsuarioCrea")
	{
	 permiso = false;
	}
	}

					if (count >=9)
	{
	if (property.PropertyName.Substring(count - 9) == "FechaCrea")
	{
	 permiso = false;
	}
	}

					if (count >=15)
	{
	if (property.PropertyName.Substring(count - 15) == "UsuarioModifica")
	{
	 permiso = false;
	}
	}

					if (count >=13)
	{
	if (property.PropertyName.Substring(count - 13) == "FechaModifica")
	{
	 permiso = false;
	}
	}

    if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly && !property.IsAssociation && permiso && !property.IsPrimaryKey) {

        // If the property is a primary key and Guid, then the Guid is generated in the controller. Hence, this propery is not displayed on the view.
        if (property.IsPrimaryKey && IsPropertyGuid(property)) {
            continue;
        }

#>
                        <div class="form-group">
<#
        if (property.IsForeignKey) {
#>
							@Html.LabelFor(model => model.<#= property.PropertyName #>, "<#= GetAssociationName(property) #>", htmlAttributes: new { @class = "control-label col-md-3" })
<#
        } else {
#>
							@Html.LabelFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "control-label col-md-3" })
<#
        }
#>
							<div class="col-md-8">
<#
        bool isCheckbox = property.TypeName.Equals(boolType);
        if (property.IsForeignKey) {
#>
<#
            if (isControlHtmlAttributesSupported) {
#>
							@Html.DropDownList("<#= property.PropertyName #>", null, htmlAttributes: new { @class = "form-control" })
<#
            } else {
#>
							@Html.DropDownList("<#= property.PropertyName #>", String.Empty)
<#
            }
#>
<#
        } else  if (isControlHtmlAttributesSupported) {
            if (isCheckbox) {
#>
								<div class="checkbox">
<#
                PushIndent("    ");
#>
								@Html.EditorFor(model => model.<#= property.PropertyName #>)
<#
            } else if (property.IsEnum && !property.IsEnumFlags) {
#>
								@Html.EnumDropDownListFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "form-control" })
<#
            } else {
#>
								@Html.EditorFor(model => model.<#= property.PropertyName #>, new { htmlAttributes = new { @class = "form-control required valid" } })
<#
            }
        } else {
#>
								@Html.EditorFor(model => model.<#= property.PropertyName #>)
<#
        }
#>
<#
        if (isControlHtmlAttributesSupported) {
#>
								@Html.ValidationMessageFor(model => model.<#= property.PropertyName #>, "", new { @class = "text-danger", @id = "error<#= property.PropertyName #>" })
<#
        } else {
#>
								@Html.ValidationMessageFor(model => model.<#= property.PropertyName #>)
<#
        }
#>
<#
        if (isCheckbox && isControlHtmlAttributesSupported) {
            PopIndent();
#>
									</div>
<#
    }
#>
                            </div>
                        </div>
<#
    }
}#>
					</div>
				}
            </div>
			<div class="modal-footer">
				<button type="button" class="btn btn-white pull-right" data-dismiss="modal">Cerrar</button>
				<button type="button" class="btn btn-primary pull-left" id="btnActualizar">Actualizar</button>
				<button type="button" class="btn btn-danger pull-left" id="btnInhabilitar">Inhabilitar</button>
			</div>
		</div>
	</div>
</div>

<#
if(IsLayoutPageSelected && ReferenceScriptLibraries && IsBundleConfigPresent) {
}
#>
<#
else if(IsLayoutPageSelected && ReferenceScriptLibraries) {
#>

<script src="~/Scripts/jquery-<#= JQueryVersion #>.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<#
}
#>
<#
// The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
#>
<#
if(!IsPartialView && !IsLayoutPageSelected) {
    ClearIndent();
#>
  </body>
</html>
<#
}
#>
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>